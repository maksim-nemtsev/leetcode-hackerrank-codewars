// Создайте цепочку промисов для последовательного выполнения асинхронных операций.
// Реализуйте функцию, которая оборачивает колбэк-функцию в промис.
// Напишите функцию, которая параллельно выполняет несколько асинхронных операций и возвращает результаты в виде массива.
// Реализуйте функцию для поиска глубины вложенности объекта (количество вложенных объектов внутри объекта).
// Создайте рекурсивную функцию для поиска наибольшего числа во вложенных массивах.
// Эти задачи помогут кандидатам на позицию Middle Frontend Developer развивать навыки работы с данными структурами и асинхронным кодом.
// Реализуйте функцию, которая ограничивает количество одновременно выполняющихся промисов (например, не более 5 одновременно).
// Напишите асинхронную функцию для параллельной загрузки данных из нескольких источников и объединения их в один объект.
// Создайте функцию, которая реализует механизм повторной попытки выполнения асинхронной операции в случае ошибки, с увеличением задержки между попытками (экспоненциальная задержка).
// Напишите асинхронную функцию для выполнения запроса к API и обработки пагинации (загрузка всех страниц с данными).
// Реализуйте функцию для ограничения частоты вызовов асинхронной функции (Rate Limiting) в определенном интервале времени.
// Создайте функцию для параллельной загрузки и обработки изображений, учитывая ограничение по количеству одновременных запросов.
// Работа с рекурсией: 6. Напишите рекурсивную функцию для генерации всех возможных комбинаций элементов массива.
// Реализуйте функцию для поиска наименьшего общего предка (LCA) двух узлов в бинарном дереве.
// Создайте рекурсивную функцию для вычисления наибольшей общей подпоследовательности (LCS) двух строк.
// Создайте цепочку промисов для последовательного выполнения асинхронных операций.
// Реализуйте функцию, которая оборачивает колбэк-функцию в промис.
// Напишите функцию, которая параллельно выполняет несколько асинхронных операций и возвращает результаты в виде массива.
// Реализуйте функцию, которая ограничивает количество одновременно выполняющихся промисов (например, не более 5 одновременно).
// Напишите асинхронную функцию для параллельной загрузки данных из нескольких источников и объединения их в один объект.
// Создайте функцию, которая реализует механизм повторной попытки выполнения асинхронной операции в случае ошибки, с увеличением задержки между попытками (экспоненциальная задержка).
// Напишите асинхронную функцию для выполнения запроса к API и обработки пагинации (загрузка всех страниц с данными).
// Реализуйте функцию для ограничения частоты вызовов асинхронной функции (Rate Limiting) в определенном интервале времени.
// Создайте функцию для параллельной загрузки и обработки изображений, учитывая ограничение по количеству одновременных запросов
